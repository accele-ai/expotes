/**
 * @packageDocumentation
 * @module api.functional.api.v1.application
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, Resolved } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { CreateApplicationDto } from "../../../../structures/CreateApplicationDto";

/**
 * @controller ApplicationController.create
 * @path POST /api/v1/application/create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  body: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    body,
  );
}
export namespace create {
  export type Input = CreateApplicationDto;
  export type Output = {
    id: string;
    name: string;
    createdAt: string & Format<"date-time">;
    teamId: string;
  }[];

  export const METADATA = {
    method: "POST",
    path: "/api/v1/application/create",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/api/v1/application/create";
}

/**
 * @controller ApplicationController.list
 * @path GET /api/v1/application/list
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function list(
  connection: IConnection,
  __0: list.Query,
): Promise<list.Output> {
  return PlainFetcher.fetch(connection, {
    ...list.METADATA,
    template: list.METADATA.path,
    path: list.path(__0),
  });
}
export namespace list {
  export type Query = Resolved<{
    teamId: string;
  }>;
  export type Output = {
    id: string;
    name: string;
    createdAt: string & Format<"date-time">;
    teamId: string;
  }[];

  export const METADATA = {
    method: "GET",
    path: "/api/v1/application/list",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = (__0: list.Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(__0 as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/api/v1/application/list";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
}
