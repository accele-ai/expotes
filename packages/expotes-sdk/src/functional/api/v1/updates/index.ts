/**
 * @packageDocumentation
 * @module api.functional.api.v1.updates
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import type { Format } from "typia/lib/tags/Format";

import type { CreateUpdatesDto } from "../../../../structures/CreateUpdatesDto";

/**
 * @controller UpdatesController.create
 * @path POST /api/v1/updates/create
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  body: create.Input,
): Promise<create.Output> {
  return PlainFetcher.fetch(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    body,
  );
}
export namespace create {
  export type Input = CreateUpdatesDto;
  export type Output =
    | undefined
    | {
        id: string;
        createdAt: string & Format<"date-time">;
        appId: string;
        isRollbacked: boolean;
        rollbackedAt: null | (string & Format<"date-time">);
        runtimeVersion: string;
        iosLaunchAssetId: null | string;
        androidLaunchAssetId: null | string;
        metadata: {
          [key: string]: string;
        };
        extra: {
          [key: string]: any;
        };
      }[];

  export const METADATA = {
    method: "POST",
    path: "/api/v1/updates/create",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/api/v1/updates/create";
}
